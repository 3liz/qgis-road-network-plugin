services:
  qgis:
    image: ${QGIS_IMAGE_TAG}
    user: ${UID}:${GID}
    command: /src/.docker/run-tests.sh
    environment:
      # Remove HOME variable if not using database
      HOME: /home/qgis
      QGIS_VERSION: ${QGIS_VERSION}
    volumes:
    - {type: bind, source: "..", target: /src}
#
# Remove everything from here if your are not using database
#
    - type: bind
      source: ./pg_service.conf
      target: /etc/postgresql-common/pg_service.conf
    depends_on:
      db:
        condition: service_healthy
    profiles:
      - qgis

  db:
    image: 3liz/postgis:${POSTGIS_VERSION}
    hostname: db
    environment:
      POSTGRES_DB: "gis"
      POSTGRES_USER: "docker"
      POSTGRES_PASSWORD: "docker"
      POSTGRES_HOST: "db"
    ports:
      - "35432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U docker -d gis -q || exit 1"]
      interval: 30s
      timeout: 30s
      start_interval: 2s
      start_period: 10s 
 
  db-runner:
    build:
      context: .
      dockerfile_inline: |
          FROM 3liz/postgis:${POSTGIS_VERSION}
          RUN apt-get -y update && apt-get install -y rename
    user: ${UID}:${GID}
    command: ${DB_COMMAND}
    working_dir: /src/.docker
    entrypoint: /src/.docker/db-runner-entrypoint
    stop_signal: SIGKILL
    volumes:
    - {type: bind, source: "..", target: /src}
    - {type: bind, source: "../${MODULE_NAME}", target: /plugin}
    - type: bind
      source: ./pg_service.conf
      target: /etc/postgresql-common/pg_service.conf
    environment:
      MODULE_NAME: ${MODULE_NAME}
      SCHEMA: ${SCHEMA}
      DB_CURRENT_VERSION: ${DB_CURRENT_VERSION}
    depends_on:
      db:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "[ -f /tmp/.db-runner-ok ] || exit 1"]
      start_interval: 2s
      start_period: 10s 
    profiles:
    - schemaspy
    - dbrunner
      
  # Wait for db-runner to set the /tmp/.db-runner-ok file
  schemaspy:
    image: schemaspy/schemaspy:latest
    volumes:
    - {type: bind, source: "../docs/database", target: /output}
    command: >-
      -t pgsql -host db -db gis -u docker -p docker -port 5432 -s ${SCHEMA} -nopages
    depends_on:
      db-runner:
        condition: service_healthy
    profiles:
    - schemaspy
